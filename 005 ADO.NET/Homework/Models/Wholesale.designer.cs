#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Homework.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Wholesale")]
	public partial class WholesaleDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUnits(Units instance);
    partial void UpdateUnits(Units instance);
    partial void DeleteUnits(Units instance);
    partial void InsertGoods(Goods instance);
    partial void UpdateGoods(Goods instance);
    partial void DeleteGoods(Goods instance);
    partial void InsertPersons(Persons instance);
    partial void UpdatePersons(Persons instance);
    partial void DeletePersons(Persons instance);
    partial void InsertPurchases(Purchases instance);
    partial void UpdatePurchases(Purchases instance);
    partial void DeletePurchases(Purchases instance);
    partial void InsertSales(Sales instance);
    partial void UpdateSales(Sales instance);
    partial void DeleteSales(Sales instance);
    partial void InsertSellers(Sellers instance);
    partial void UpdateSellers(Sellers instance);
    partial void DeleteSellers(Sellers instance);
    #endregion
		
		public WholesaleDataContext() : 
				base(global::Homework.Properties.Settings.Default.WholesaleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WholesaleDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WholesaleDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WholesaleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WholesaleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Units> Units
		{
			get
			{
				return this.GetTable<Units>();
			}
		}
		
		public System.Data.Linq.Table<Goods> Goods
		{
			get
			{
				return this.GetTable<Goods>();
			}
		}
		
		public System.Data.Linq.Table<Persons> Persons
		{
			get
			{
				return this.GetTable<Persons>();
			}
		}
		
		public System.Data.Linq.Table<Purchases> Purchases
		{
			get
			{
				return this.GetTable<Purchases>();
			}
		}
		
		public System.Data.Linq.Table<Sales> Sales
		{
			get
			{
				return this.GetTable<Sales>();
			}
		}
		
		public System.Data.Linq.Table<Sellers> Sellers
		{
			get
			{
				return this.GetTable<Sellers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Units")]
	public partial class Units : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Short;
		
		private string _Long;
		
		private EntitySet<Purchases> _Purchases;
		
		private EntitySet<Sales> _Sales;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnShortChanging(string value);
    partial void OnShortChanged();
    partial void OnLongChanging(string value);
    partial void OnLongChanged();
    #endregion
		
		public Units()
		{
			this._Purchases = new EntitySet<Purchases>(new Action<Purchases>(this.attach_Purchases), new Action<Purchases>(this.detach_Purchases));
			this._Sales = new EntitySet<Sales>(new Action<Sales>(this.attach_Sales), new Action<Sales>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Short", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string Short
		{
			get
			{
				return this._Short;
			}
			set
			{
				if ((this._Short != value))
				{
					this.OnShortChanging(value);
					this.SendPropertyChanging();
					this._Short = value;
					this.SendPropertyChanged("Short");
					this.OnShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Long", DbType="NVarChar(26) NOT NULL", CanBeNull=false)]
		public string Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Units_Purchases", Storage="_Purchases", ThisKey="Id", OtherKey="IdUnit")]
		public EntitySet<Purchases> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Units_Sales", Storage="_Sales", ThisKey="Id", OtherKey="IdUnit")]
		public EntitySet<Sales> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchases(Purchases entity)
		{
			this.SendPropertyChanging();
			entity.Units = this;
		}
		
		private void detach_Purchases(Purchases entity)
		{
			this.SendPropertyChanging();
			entity.Units = null;
		}
		
		private void attach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.Units = this;
		}
		
		private void detach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.Units = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Goods")]
	public partial class Goods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Item;
		
		private EntitySet<Purchases> _Purchases;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemChanging(string value);
    partial void OnItemChanged();
    #endregion
		
		public Goods()
		{
			this._Purchases = new EntitySet<Purchases>(new Action<Purchases>(this.attach_Purchases), new Action<Purchases>(this.detach_Purchases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Item
		{
			get
			{
				return this._Item;
			}
			set
			{
				if ((this._Item != value))
				{
					this.OnItemChanging(value);
					this.SendPropertyChanging();
					this._Item = value;
					this.SendPropertyChanged("Item");
					this.OnItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_Purchases", Storage="_Purchases", ThisKey="Id", OtherKey="IdItem")]
		public EntitySet<Purchases> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchases(Purchases entity)
		{
			this.SendPropertyChanging();
			entity.Goods = this;
		}
		
		private void detach_Purchases(Purchases entity)
		{
			this.SendPropertyChanging();
			entity.Goods = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Persons : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Surname;
		
		private string _Name;
		
		private string _Patronymic;
		
		private string _Passport;
		
		private EntitySet<Sellers> _Sellers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnPassportChanging(string value);
    partial void OnPassportChanged();
    #endregion
		
		public Persons()
		{
			this._Sellers = new EntitySet<Sellers>(new Action<Sellers>(this.attach_Sellers), new Action<Sellers>(this.detach_Sellers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passport", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Passport
		{
			get
			{
				return this._Passport;
			}
			set
			{
				if ((this._Passport != value))
				{
					this.OnPassportChanging(value);
					this.SendPropertyChanging();
					this._Passport = value;
					this.SendPropertyChanged("Passport");
					this.OnPassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Sellers", Storage="_Sellers", ThisKey="Id", OtherKey="IdPerson")]
		public EntitySet<Sellers> Sellers
		{
			get
			{
				return this._Sellers;
			}
			set
			{
				this._Sellers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sellers(Sellers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Sellers(Sellers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchases")]
	public partial class Purchases : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdItem;
		
		private int _IdUnit;
		
		private System.DateTime _PurchaseDate;
		
		private int _Price;
		
		private int _Amount;
		
		private EntitySet<Sales> _Sales;
		
		private EntityRef<Goods> _Goods;
		
		private EntityRef<Units> _Units;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdItemChanging(int value);
    partial void OnIdItemChanged();
    partial void OnIdUnitChanging(int value);
    partial void OnIdUnitChanged();
    partial void OnPurchaseDateChanging(System.DateTime value);
    partial void OnPurchaseDateChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public Purchases()
		{
			this._Sales = new EntitySet<Sales>(new Action<Sales>(this.attach_Sales), new Action<Sales>(this.detach_Sales));
			this._Goods = default(EntityRef<Goods>);
			this._Units = default(EntityRef<Units>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdItem", DbType="Int NOT NULL")]
		public int IdItem
		{
			get
			{
				return this._IdItem;
			}
			set
			{
				if ((this._IdItem != value))
				{
					if (this._Goods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdItemChanging(value);
					this.SendPropertyChanging();
					this._IdItem = value;
					this.SendPropertyChanged("IdItem");
					this.OnIdItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUnit", DbType="Int NOT NULL")]
		public int IdUnit
		{
			get
			{
				return this._IdUnit;
			}
			set
			{
				if ((this._IdUnit != value))
				{
					if (this._Units.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUnitChanging(value);
					this.SendPropertyChanging();
					this._IdUnit = value;
					this.SendPropertyChanged("IdUnit");
					this.OnIdUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseDate", DbType="Date NOT NULL")]
		public System.DateTime PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if ((this._PurchaseDate != value))
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Purchases_Sales", Storage="_Sales", ThisKey="Id", OtherKey="IdPurchase")]
		public EntitySet<Sales> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_Purchases", Storage="_Goods", ThisKey="IdItem", OtherKey="Id", IsForeignKey=true)]
		public Goods Goods
		{
			get
			{
				return this._Goods.Entity;
			}
			set
			{
				Goods previousValue = this._Goods.Entity;
				if (((previousValue != value) 
							|| (this._Goods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Goods.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._IdItem = value.Id;
					}
					else
					{
						this._IdItem = default(int);
					}
					this.SendPropertyChanged("Goods");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Units_Purchases", Storage="_Units", ThisKey="IdUnit", OtherKey="Id", IsForeignKey=true)]
		public Units Units
		{
			get
			{
				return this._Units.Entity;
			}
			set
			{
				Units previousValue = this._Units.Entity;
				if (((previousValue != value) 
							|| (this._Units.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Units.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Units.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._IdUnit = value.Id;
					}
					else
					{
						this._IdUnit = default(int);
					}
					this.SendPropertyChanged("Units");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.Purchases = this;
		}
		
		private void detach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.Purchases = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sales")]
	public partial class Sales : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPurchase;
		
		private int _IdUnit;
		
		private int _IdSeller;
		
		private System.DateTime _SaleDate;
		
		private int _Price;
		
		private int _Amount;
		
		private EntityRef<Purchases> _Purchases;
		
		private EntityRef<Units> _Units;
		
		private EntityRef<Sellers> _Sellers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPurchaseChanging(int value);
    partial void OnIdPurchaseChanged();
    partial void OnIdUnitChanging(int value);
    partial void OnIdUnitChanged();
    partial void OnIdSellerChanging(int value);
    partial void OnIdSellerChanged();
    partial void OnSaleDateChanging(System.DateTime value);
    partial void OnSaleDateChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public Sales()
		{
			this._Purchases = default(EntityRef<Purchases>);
			this._Units = default(EntityRef<Units>);
			this._Sellers = default(EntityRef<Sellers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPurchase", DbType="Int NOT NULL")]
		public int IdPurchase
		{
			get
			{
				return this._IdPurchase;
			}
			set
			{
				if ((this._IdPurchase != value))
				{
					if (this._Purchases.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPurchaseChanging(value);
					this.SendPropertyChanging();
					this._IdPurchase = value;
					this.SendPropertyChanged("IdPurchase");
					this.OnIdPurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUnit", DbType="Int NOT NULL")]
		public int IdUnit
		{
			get
			{
				return this._IdUnit;
			}
			set
			{
				if ((this._IdUnit != value))
				{
					if (this._Units.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUnitChanging(value);
					this.SendPropertyChanging();
					this._IdUnit = value;
					this.SendPropertyChanged("IdUnit");
					this.OnIdUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSeller", DbType="Int NOT NULL")]
		public int IdSeller
		{
			get
			{
				return this._IdSeller;
			}
			set
			{
				if ((this._IdSeller != value))
				{
					if (this._Sellers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSellerChanging(value);
					this.SendPropertyChanging();
					this._IdSeller = value;
					this.SendPropertyChanged("IdSeller");
					this.OnIdSellerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDate", DbType="Date NOT NULL")]
		public System.DateTime SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Purchases_Sales", Storage="_Purchases", ThisKey="IdPurchase", OtherKey="Id", IsForeignKey=true)]
		public Purchases Purchases
		{
			get
			{
				return this._Purchases.Entity;
			}
			set
			{
				Purchases previousValue = this._Purchases.Entity;
				if (((previousValue != value) 
							|| (this._Purchases.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Purchases.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Purchases.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._IdPurchase = value.Id;
					}
					else
					{
						this._IdPurchase = default(int);
					}
					this.SendPropertyChanged("Purchases");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Units_Sales", Storage="_Units", ThisKey="IdUnit", OtherKey="Id", IsForeignKey=true)]
		public Units Units
		{
			get
			{
				return this._Units.Entity;
			}
			set
			{
				Units previousValue = this._Units.Entity;
				if (((previousValue != value) 
							|| (this._Units.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Units.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Units.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._IdUnit = value.Id;
					}
					else
					{
						this._IdUnit = default(int);
					}
					this.SendPropertyChanged("Units");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sellers_Sales", Storage="_Sellers", ThisKey="IdSeller", OtherKey="Id", IsForeignKey=true)]
		public Sellers Sellers
		{
			get
			{
				return this._Sellers.Entity;
			}
			set
			{
				Sellers previousValue = this._Sellers.Entity;
				if (((previousValue != value) 
							|| (this._Sellers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sellers.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Sellers.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._IdSeller = value.Id;
					}
					else
					{
						this._IdSeller = default(int);
					}
					this.SendPropertyChanged("Sellers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sellers")]
	public partial class Sellers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPerson;
		
		private double _Interest;
		
		private EntitySet<Sales> _Sales;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPersonChanging(int value);
    partial void OnIdPersonChanged();
    partial void OnInterestChanging(double value);
    partial void OnInterestChanged();
    #endregion
		
		public Sellers()
		{
			this._Sales = new EntitySet<Sales>(new Action<Sales>(this.attach_Sales), new Action<Sales>(this.detach_Sales));
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPerson", DbType="Int NOT NULL")]
		public int IdPerson
		{
			get
			{
				return this._IdPerson;
			}
			set
			{
				if ((this._IdPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonChanging(value);
					this.SendPropertyChanging();
					this._IdPerson = value;
					this.SendPropertyChanged("IdPerson");
					this.OnIdPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Float NOT NULL")]
		public double Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sellers_Sales", Storage="_Sales", ThisKey="Id", OtherKey="IdSeller")]
		public EntitySet<Sales> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Sellers", Storage="_Persons", ThisKey="IdPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Sellers.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Sellers.Add(this);
						this._IdPerson = value.Id;
					}
					else
					{
						this._IdPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.Sellers = this;
		}
		
		private void detach_Sales(Sales entity)
		{
			this.SendPropertyChanging();
			entity.Sellers = null;
		}
	}
}
#pragma warning restore 1591
